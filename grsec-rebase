#!/bin/bash

usage()
{
cat << EOF
usage: $0 options

grsec Rebase tool

OPTIONS:
   -u      Fetch and checkout latest upstream stable kernel. Specify the version
           here (e.g. 3.18.16).
   -p      URL to latest grsecurity patch. Apply the patch to its corresponding 
           base vanilla kernel and generate tag.
   -o      Rebase the most recent/previous grsecurity version to the base vanilla
           kernel in the -p option. This is needed to generate a diff with the
           tag generated in -p option.
   -c      Clean tree. Useful if the rebase is messed up restarting again is only option.
   -t      Tag previous rebase generated by -o option.
EOF
}
while getopts “u:p:o:ct” OPTION
do
    case $OPTION in
        u)  
           upstream_stable=$OPTARG
           ;;
        p)   
           latest_grsec_patch=$OPTARG
           ;;
        o)   
           previous_grsec_tag=$OPTARG
           ;;
	c)
	   clean_tree=true;
	   ;;
        t)
	   tag_prev_rebase=true;
	   ;;
    esac
done

unset https_proxy
unset http_proxy

if [[ $# -lt 1 ]]
then
   usage 
   exit;
fi

origin=https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git

# Checkout latest stable kernel version
if [ -n "$upstream_stable" ]; then
   echo "==> Fetching latest kernel..."
   git fetch $origin --tags
   echo "==> Pulling $upstream_stable"
   git pull $origin v$upstream_stable
   echo "==> Completed $upstream_stable pull. Fix rebase conflicts if needed"
fi

# Determine and checkout base grsec kernel version and apply patch
if [ -n "$latest_grsec_patch" ]; then
    rm *.patch *~*
    echo "==> Downloading $latest_grsec_patch"
    wget $latest_grsec_patch
    gpatch=(${latest_grsec_patch//-/ })
    echo "==> Checking out grsec base kernel ${gpatch[2]}..."
    git checkout v"${gpatch[2]}"
    echo "${gpatch[2]}" > ./base_grsec_kernel
    urlfile=(${latest_grsec_patch//// })
    echo "==> Applying patch ${urlfile[3]}"
    patch -p1 < ./"${urlfile[3]}"
    rm ./"${urlfile[3]}"
    git add *
    git commit -m "${urlfile[3]%.*}"
    git tag "${urlfile[3]%.*}"
    echo "${urlfile[3]%.*}" > ./latest_grsec_stable
fi

# Generate a rebase from previous rebase
# TODO: this should be intelligent enough to figure which was the last
# rebase version ($previous_grsec_tag)
if [ -n "$previous_grsec_tag" ]; then
    if [[ -s ./base_grsec_kernel ]] ; then
	base_kern=`cat ./base_grsec_kernel`
	echo $base_kern
    else
	echo "Base grsec kernel version not checked-out, run rebase.sh -p first"
	usage
        exit;
    fi ;
    echo "==> Rebasing $base_kern to $previous_grsec_tag"
    git checkout $previous_grsec_tag
    git pull --rebase $origin v$base_kern
    echo "==> Completed $base_kern to $previous_grsec_tag rebase. Fix conflicts if needed"
    echo "    Hint: See results of 'git diff .'"
    echo "    When there are no conflicts or done fixing conflicts, do rebase.sh -t"
    echo "    to generate tag."
    
    echo "$previous_grsec_tag" > ./previous_grsec_tag
fi

# Tag rebase above
if [ "$tag_prev_rebase" = true ]; then
    if [[ -s ./previous_grsec_tag ]] &&
	[[ -s ./base_grsec_kernel ]] &&
	[[ -s ./latest_grsec_stable ]]; then
	base_kern=`cat ./base_grsec_kernel`
	grsec_stamp=`cat ./previous_grsec_tag`
	grsec_stamp=(${grsec_stamp//-/ })
	latest_grsec_stable=`cat ./latest_grsec_stable`
	git tag "grsecurity-3.1-$base_kern-${grsec_stamp[3]}-rebased"
	echo "==> Tagging grsecurity-3.1-$base_kern-${grsec_stamp[3]}-rebased"
	echo "    Diff this tag with $latest_grsec_stable and apply to linux-3.18.y-grsec"
	rm ./previous_grsec_tag ./base_grsec_kernel
    else
	echo "No previous grsec rebase tag. Do rebase.sh -o and rebase.sh -p first"
	usage
	exit;
    fi;
    echo "asdas"
fi

# Clean tree
if [ "$clean_tree" = true ]; then
    git reset --hard
    rm -rf *.orig tools/ include/ grsecurity arch/ localversion-grsec net/ scripts/
    git checkout linux-3.18.y-grsec
    git checkout .
fi
